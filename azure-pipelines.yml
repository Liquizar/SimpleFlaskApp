# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest
# strategy:
#   matrix:
#     Python27:
#       python.version: '2.7'
#     Python35:
#       python.version: '3.5'
#     Python36:
#       python.version: '3.6'
#     Python37:
#       python.version: '3.7'

# steps:
# - task: UsePythonVersion@0
#   inputs:
#     versionSpec: '$(python.version)'
#   displayName: 'Use Python $(python.version)'

# - script: |
#     python -m pip install --upgrade pip
#     pip install -r requirements.txt
#   displayName: 'Install dependencies'

# - script: |
#     pip install pytest pytest-azurepipelines
#     pytest
#   displayName: 'pytest'

# trigger:
# - main

# pool:
#   vmImage: 'ubuntu-latest'
#   name: self-hosted

# stages:
# - stage: Build
#   jobs:
#   - job: BuildJob
#     steps:
#     - script: |
#         python3 --version
#       displayName: 'Show Python version'

#     - script: |
#         python3 -m pip install --upgrade pip
#         pip install -r requirements.txt
#       displayName: 'Install dependencies'

#     - task: ArchiveFiles@2
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(build.artifactstagingdirectory)/flask-app.zip'
#       displayName: 'Archive files'

#     - task: PublishBuildArtifacts@1
#       inputs:
#         pathtoPublish: '$(build.artifactstagingdirectory)'
#         artifactName: 'flask-app'
#         publishLocation: 'Container'

# - stage: Build_image
#   jobs:
#   - job: BuildImageJob
#     steps:
#       - task: Docker@2
#         displayName: Build an image
#         inputs:
#           command: 'build'
#           Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile'
#           buildContext: '$(System.DefaultWorkingDirectory)'
#           repository: public.ecr.aws/p1w1n2s0/azureassignmentecr

# - stage: Push_Image
#   jobs:
#   - job: PushImagetoecr
#     steps:
#       - task: ECRPushImage@1
#         inputs:
#          awsCredentials: 'AzureAssignment'
#          regionName: 'ap-south-1'
#          imageSource: 'imagename'
#          sourceImageName: 'flask-app'
#          sourceImageTag: $(Build.BuildId)
#          pushTag: $(Build.BuildId)
#          repositoryName: 'azureassignmentecr'

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'
  name: self-hosted

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - script: |
        python3 --version
      displayName: 'Show Python version'

    - script: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(build.artifactstagingdirectory)/flask-app.zip'
      displayName: 'Archive files'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: 'flask-app'
        publishLocation: 'Container'

- stage: Build_image
  jobs:
  - job: BuildImageJob
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'flask-app'
        downloadPath: '$(System.DefaultWorkingDirectory)/flask-app'

    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '$(System.DefaultWorkingDirectory)/flask-app/flask-app.zip'
        destinationFolder: '$(System.DefaultWorkingDirectory)/flask-app'

    - task: Docker@2
      displayName: Build an image
      inputs:
        command: 'build'
        Dockerfile: '$(System.DefaultWorkingDirectory)/flask-app/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)/flask-app'
        repository: public.ecr.aws/p1w1n2s0/azureassignmentecr

- stage: Push_Image
  jobs:
  - job: PushImagetoecr
    steps:
    - task: ECRPushImage@1
      inputs:
        awsCredentials: 'AzureAssignment'
        regionName: 'ap-south-1'
        imageSource: 'imagename'
        sourceImageName: 'flask-app'
        sourceImageTag: $(Build.BuildId)
        pushTag: $(Build.BuildId)
        repositoryName: 'azureassignmentecr'
